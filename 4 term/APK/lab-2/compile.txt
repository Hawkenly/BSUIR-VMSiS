#include <dos.h>

#define BUFF_WIDTH 80
#define CENTER_OFFSET 12
#define LEFT_OFFSET 20
#define REG_SCREEN_SIZE 9

struct VIDEO
{
    unsigned char symb;
    unsigned char attr;
}typedef VIDEO;

int attribute = 0x5e;	//color

void print(int offset, int value);
void getRegisterValue(void);



void interrupt(*oldHandle08) (void);
void interrupt(*oldHandle09) (void);
void interrupt(*oldHandle0A) (void);
void interrupt(*oldHandle0B) (void);
void interrupt(*oldHandle0C) (void);
void interrupt(*oldHandle0D) (void);
void interrupt(*oldHandle0E) (void);
void interrupt(*oldHandle0F) (void);

void interrupt(*oldHandle70) (void);
void interrupt(*oldHandle71) (void);
void interrupt(*oldHandle72) (void);
void interrupt(*oldHandle73) (void);
void interrupt(*oldHandle74) (void);
void interrupt(*oldHandle75) (void);
void interrupt(*oldHandle76) (void);
void interrupt(*oldHandle77) (void);

void interrupt newHandleB0(void) { getRegisterValue(); oldHandle08(); }
void interrupt newHandleB1(void) { attribute++;  getRegisterValue(); oldHandle09(); }
void interrupt newHandleB2(void) { getRegisterValue(); oldHandle0A(); }
void interrupt newHandleB3(void) { getRegisterValue(); oldHandle0B(); }
void interrupt newHandleB4(void) { getRegisterValue(); oldHandle0C(); }
void interrupt newHandleB5(void) { getRegisterValue(); oldHandle0D(); }
void interrupt newHandleB6(void) { getRegisterValue(); oldHandle0E(); }
void interrupt newHandleB7(void) { getRegisterValue(); oldHandle0F(); }

void interrupt newHandle08(void) { getRegisterValue(); oldHandle70(); }
void interrupt newHandle09(void) { getRegisterValue(); oldHandle71(); }
void interrupt newHandle0A(void) { getRegisterValue(); oldHandle72(); }
void interrupt newHandle0B(void) { getRegisterValue(); oldHandle73(); }
void interrupt newHandle0C(void) { getRegisterValue(); oldHandle74(); }
void interrupt newHandle0D(void) { getRegisterValue(); oldHandle75(); }
void interrupt newHandle0E(void) { getRegisterValue(); oldHandle76(); }
void interrupt newHandle0F(void) { getRegisterValue(); oldHandle77(); }

void print(int offset, int value)
{
    char temp;
    int i;

    VIDEO far* screen = (VIDEO far *)MK_FP(0xB800, 0);
    screen += CENTER_OFFSET * BUFF_WIDTH + offset;

    for (i = 7; i >= 0; i--)
    {
        temp = value % 2;
        value /= 2;
        screen->symb = temp + '0';
        screen->attr = attribute;
        screen++;
    }
}

void getRegisterValue(void)
{
    print(0 + LEFT_OFFSET, inp(0x21));

    outp(0x20, 0x0B);
    print(REG_SCREEN_SIZE + LEFT_OFFSET, inp(0x20));

    outp(0x20, 0x0A);
    print(REG_SCREEN_SIZE * 2 + LEFT_OFFSET, inp(0x20));

    print(BUFF_WIDTH + LEFT_OFFSET, inp(0xA1));

    outp(0xA0, 0x0B);
    print(BUFF_WIDTH + REG_SCREEN_SIZE + LEFT_OFFSET, inp(0xA0));

    outp(0xA0, 0x0A);
    print(BUFF_WIDTH + REG_SCREEN_SIZE * 2 + LEFT_OFFSET, inp(0xA0));
}

void init(void)
{
    // IRQ0-7
    oldHandle08 = getvect(0x08);        // Timer`
    oldHandle09 = getvect(0x09);        // Keyboard
    oldHandle0A = getvect(0x0A);		// Slave IRQ
    oldHandle0B = getvect(0x0B);	    // Random deviece
    oldHandle0C = getvect(0x0C);	    // Random deviece
    oldHandle0D = getvect(0x0D); 	    // Random deviece
    oldHandle0E = getvect(0x0E); 	    // Random deviece
    oldHandle0F = getvect(0x0F);	    // Random deviece

    // IRQ8-15
    oldHandle70 = getvect(0x70);		// Real time clock
    oldHandle71 = getvect(0x71);	    // Random deviece
    oldHandle72 = getvect(0x72);	    // Random deviece
    oldHandle73 = getvect(0x73);		// Random deviece or timer
    oldHandle74 = getvect(0x74);		// PS/2 mouse
    oldHandle75 = getvect(0x75);		// FPU error
    oldHandle76 = getvect(0x76);		// Random deviece or first ATA controller
    oldHandle77 = getvect(0x77);		// Random deviece or second ATA controller					Ñ‡

    setvect(0x08, newHandleB0);
    setvect(0x09, newHandleB1);
    setvect(0x0A, newHandleB2);
    setvect(0x0B, newHandleB3);
    setvect(0x0C, newHandleB4);
    setvect(0x0D, newHandleB5);
    setvect(0x0E, newHandleB6);
    setvect(0x0F, newHandleB7);

    setvect(0x70, newHandle08);
    setvect(0x71, newHandle09);
    setvect(0x72, newHandle0A);
    setvect(0x73, newHandle0B);
    setvect(0x74, newHandle0C);
    setvect(0x75, newHandle0D);
    setvect(0x76, newHandle0E);
    setvect(0x77, newHandle0F);

    // Disable interrupts handling (cli)
    _disable();

    // Master
    outp(0x20, 0x11); // ICW1
    outp(0x21, 0xB0); // ICW2
    outp(0x21, 0x04); // ICW3
    outp(0x21, 0x01); // ICW4

    // Slave
    outp(0xA0, 0x11); // ICW1
    outp(0xA1, 0x08); // ICW2
    outp(0xA1, 0x02); // ICW3
    outp(0xA1, 0x01); // ICW4

    // Enable interrupt handling (sti)
    _enable();
}

int main(void)
{
    unsigned far *fp;			// pointer declaration

    init();						// execute initialization

    FP_SEG(fp) = _psp;			// returns the segment of the far pointer
    FP_OFF(fp) = 0x2c;			// returns the offset of the far pointer
    _dos_freemem(*fp);			// frees a block of memory whose first byte is located in a fp

    _dos_keep(0, (_DS - _CS) + (_SP / 16) + 1);	// terminates program execution, although it remains in memory resident
    // 1st param - ending code, 2nd param - resident program size
    return 0;
}
